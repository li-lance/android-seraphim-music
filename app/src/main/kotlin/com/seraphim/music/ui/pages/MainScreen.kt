package com.seraphim.music.ui.pages

import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.CompositionLocalProvider
import androidx.compose.runtime.getValue
import androidx.compose.runtime.staticCompositionLocalOf
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.navigation.NavHostController
import androidx.navigation.compose.currentBackStackEntryAsState
import com.ramcosta.composedestinations.DestinationsNavHost
import com.ramcosta.composedestinations.generated.NavGraphs
import com.ramcosta.composedestinations.generated.destinations.DiscoverScreenDestination
import com.ramcosta.composedestinations.generated.destinations.FavoriteScreenDestination
import com.ramcosta.composedestinations.generated.destinations.HomeScreenDestination
import com.ramcosta.composedestinations.generated.destinations.ProfileScreenDestination
import com.ramcosta.composedestinations.navigation.DestinationsNavigator
import com.ramcosta.composedestinations.utils.rememberDestinationsNavigator
import com.seraphim.music.ui.main.BottomNavBar
import com.seraphim.music.ui.theme.SeraphimMusicTheme

val LocalDestinationsNavigator = staticCompositionLocalOf<DestinationsNavigator> {
    error("DestinationsNavigator 未初始化")
}

@Composable
fun MainScreen(navController: NavHostController) {
    val navigator = navController.rememberDestinationsNavigator()

    CompositionLocalProvider(LocalDestinationsNavigator provides navigator) {
        Scaffold(
            modifier = Modifier.fillMaxSize(),
            bottomBar = {
                val navBackStackEntry by navController.currentBackStackEntryAsState()
                val currentDestinationRoute = navBackStackEntry?.destination?.route
                if (currentDestinationRoute == HomeScreenDestination.route ||
                    currentDestinationRoute == DiscoverScreenDestination.route ||
                    currentDestinationRoute == FavoriteScreenDestination.route ||
                    currentDestinationRoute == ProfileScreenDestination.route
                ) {
                    BottomNavBar(navController = navController,navigator)
                }
            }) { innerPadding ->
            DestinationsNavHost(
                navController = navController,
                navGraph = NavGraphs.root, // Automatically generated by Compose Destinations
                modifier = Modifier.padding(bottom = innerPadding.calculateBottomPadding()),
                start = NavGraphs.root.defaultStartDirection,
            )
        }
    }
}

@Composable
fun Greeting(name: String, modifier: Modifier = Modifier) {
    Text(
        text = "Hello $name!",
        modifier = modifier
    )
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    SeraphimMusicTheme {
        Greeting("Android")
    }
}